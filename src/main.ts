import * as core from '@actions/core'
import * as github from '@actions/github'
import {graphql} from '@octokit/graphql'
import {wait} from './wait'

async function run(): Promise<void> {
  try {
    const ms: string = core.getInput('milliseconds')
    core.debug(`Waiting ${ms} milliseconds ...`) // debug is only output if you set the secret `ACTIONS_STEP_DEBUG` to true

    core.debug(new Date().toTimeString())
    await wait(parseInt(ms, 10))
    core.debug(new Date().toTimeString())

    core.debug(`repo: ${github.context.repo.repo}`)
    core.debug(`owner:: ${github.context.repo.owner}`)

    const {alerts} = await graphql(
      `
        query VulnerabilityAlerts($repo: String!, $owner: String!) {
          repository(name: $repo, owner: $owner) {
            vulnerabilityAlerts(first: 100) {
              nodes {
                createdAt
                dismissedAt
                state
                securityVulnerability {
                  package {
                    name
                  }
                  advisory {
                    description
                  }
                }
              }
            }
          }
        }
      `,
      {
        repo: github.context.repo.repo,
        owner: github.context.repo.owner
      }
    )

    core.setOutput('alerts', alerts)
  } catch (error) {
    if (error instanceof Error) core.setFailed(error.message)
  }
}

run()
